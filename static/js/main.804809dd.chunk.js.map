{"version":3,"sources":["styles.js","App.js","index.js"],"names":["Container","styled","div","CheckboxContainer","li","CheckboxContent","props","marginLeft","Checkbox","App","useState","values","setValues","updateComponent","setUpdateComponent","handleTree","children","fatherPosition","arrayChildren","Object","keys","forEach","key","push","handleFormatChildKeys","length","expanded","totalItemsToRemove","childrenPosition","index","level","checked","unchecked","splice","handleUpdateComponent","handleHideChildren","handleShowChildren","handleCheckFather","father","handleTopFather","handleCheckChildren","localStorage","setItem","JSON","stringify","useEffect","getItem","storage","parse","array","data","bootApplication","map","item","id","className","onClick","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.804809dd.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  max-width: 100%;\r\n  padding: 1rem;\r\n\r\n  & h1 {\r\n    color: var(--color-title);\r\n    margin: 1rem 0 3rem 0;\r\n  }\r\n\r\n  & main {\r\n    width: 100%;\r\n    max-width: 600px;\r\n    border-radius: 0.3rem;\r\n    background-color: var(--color-white);\r\n  }\r\n`;\r\n\r\nexport const CheckboxContainer = styled.li`\r\n  width: 100%;\r\n  padding: 0 1rem;\r\n  list-style: none;\r\n\r\n  &:hover {\r\n    background-color: var(--color-checkbox-container-hover);\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const CheckboxContent = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: ${props => props.marginLeft}rem;\r\n\r\n  & label {\r\n    width: 90%;\r\n    padding: 1rem;\r\n  }\r\n\r\n  & label:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  & svg {\r\n    font-size: 20px;\r\n    color: var(--color-primary);\r\n    transition: all 0.3s;\r\n  }\r\n\r\n  & svg.expanded {\r\n    color: var(--color-active);\r\n    transform: rotate(-180deg);\r\n  }\r\n`;\r\n\r\nexport const Checkbox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  width: 1rem;\r\n  height: 1rem;\r\n  margin-right: 1rem;\r\n  border: 2px solid var(--color-primary);\r\n  border-radius: 0.1rem;\r\n\r\n  &.checked {\r\n    background: var(--color-active);\r\n    border: 2px solid var(--color-active);\r\n  }\r\n\r\n  & svg {\r\n    color: var(--color-white);\r\n  }\r\n`;","import React, { useState, useEffect } from 'react';\nimport { \n  MdKeyboardArrowDown,\n  MdCheck,\n  MdRemove\n} from 'react-icons/md';\n\nimport data from './data.json';\n\nimport { \n  Container,\n  CheckboxContainer,\n  CheckboxContent,\n  Checkbox\n} from './styles';\n\nfunction App() {\n  const [values, setValues] = useState([]);\n  const [updateComponent, setUpdateComponent] = useState(false);\n\n  /**\n   * Ao carregar o componente, é transformado em array os dados das chaves pais do arquivo data.json\n   */\n  useEffect(() => {\n    function bootApplication() {\n      // Caso não exita os valores criados no localStorage eles são criados, caso contrário eles são pegos para setar no estado values\n      if (!localStorage.getItem('data')) {\n        let array = [];\n        Object.keys(data).forEach(key => {\n          array.push(data[key]);\n        });\n        localStorage.setItem('data', JSON.stringify(array));\n        setValues(array);\n      } else {\n        let storage = localStorage.getItem('data');\n        setValues(JSON.parse(storage));\n      }\n    }\n\n    bootApplication();\n  }, []);\n\n  /**\n   * Sempre que o estado updateComponente sofre uma atualização, é renderizado o componente\n   */\n  useEffect(() => {\n  }, [updateComponent]);\n\n  /**\n   * Transforma em array os dados dos filhos passado por parâmetro\n   * @param children \n   */\n  function handleFormatChildKeys(children) {\n    let arrayChildren = [];\n    Object.keys(children).forEach(key => {\n      arrayChildren.push(children[key]);\n    });\n    return arrayChildren;\n  }\n  \n  /**\n   * Controla a árvore de elementos\n   * @param children \n   * @param fatherPosition \n   */\n  function handleTree(children, fatherPosition) {\n    let arrayChildren = handleFormatChildKeys(children);\n    if (arrayChildren.length === 0) {\n      return;\n    }\n\n    // Se o pai já estiver expandido, será removido os filhos, caso contrário, será exibido os filhos\n    if (values[fatherPosition].expanded === true) {\n      handleHideChildren(fatherPosition);\n    } else {\n      handleShowChildren(fatherPosition, arrayChildren);\n    }\n  }\n\n  /**\n   * Exibe os filhos conforme a posição do pai passado por parâmetro\n   * @param fatherPosition \n   * @param arrayChildren \n   */\n  function handleShowChildren(fatherPosition, arrayChildren) {\n    values[fatherPosition].expanded = !values[fatherPosition].expanded;\n    \n    let childrenPosition = fatherPosition + 1;\n\n    for (let index = 0; index < arrayChildren.length; index++) {\n      const children = arrayChildren[index];\n      children.expanded = false;\n      children.checked = false;\n      children.unchecked = false;\n      if (values[fatherPosition].checked && !values[fatherPosition].unchecked) {\n        children.checked = true;\n      }\n      // Insere no array os filhos do pai\n      values.splice(childrenPosition++, 0, children);\n    }\n\n    handleUpdateComponent();\n  }\n\n  /**\n   * Esconde os filhos conforme a posição do pai passado por parâmetro\n   * @param fatherPosition \n   */\n  function handleHideChildren(fatherPosition) {\n    values[fatherPosition].expanded = !values[fatherPosition].expanded;\n    \n    let totalItemsToRemove = 0;\n    let childrenPosition = fatherPosition + 1;\n\n    for (let index = childrenPosition; index < values.length; index++) {\n      const children = values[index];\n      if (children.level >  values[fatherPosition].level) {\n        children.expanded = false;\n        children.checked = false;\n        children.unchecked = false;\n        totalItemsToRemove++;\n      } else {\n        // Encontrou um item do mesmo nível do pai\n        break;\n      } \n    }\n\n    // Remove do array os filhos do pai, passando a posição do primeiro filho e o total de itens para remover a partir da posição\n    values.splice(childrenPosition, totalItemsToRemove);\n\n    handleUpdateComponent();\n  }\n\n  /**\n   * Controla os checkbox dos níveis\n   * @param fatherPosition \n   */\n  function handleCheckFather(fatherPosition) {\n    if (values[fatherPosition].level > 0) {\n      if (values[fatherPosition].unchecked && values[fatherPosition].checked) {\n        values[fatherPosition].unchecked = false;\n      } else {\n        values[fatherPosition].checked = !values[fatherPosition].checked;\n      }\n\n      handleTopFather(fatherPosition);\n     \n    } else {\n      if (values[fatherPosition].checked && values[fatherPosition].unchecked) {\n        values[fatherPosition].unchecked = false;\n      } else {\n        values[fatherPosition].checked = !values[fatherPosition].checked;\n      }\n    }\n    \n    handleCheckChildren(fatherPosition);\n    \n    handleUpdateComponent();\n  }\n\n  /**\n   * Verifica se existe um pai de um nível superior\n   * @param fatherPosition \n   */\n  function handleTopFather(fatherPosition) {\n    for (let index = fatherPosition; index < values.length; index--) {\n      const father = values[index];\n      if (father.level === values[fatherPosition].level - 1) {\n        if (father.checked) {\n          father.unchecked = true;\n        } else {\n          father.checked = true;\n          father.unchecked = true;\n        }\n        break;\n      }\n    }\n  }\n  \n  /**\n   * Se o pai estiver expandido, vai marcar ou desmarcar todos os filhos do pai passado por parâmetro\n   * @param fatherPosition \n   */\n  function handleCheckChildren(fatherPosition) {\n    if (values[fatherPosition].expanded) {\n      let childrenPosition = fatherPosition + 1;\n      for (let index = childrenPosition; index < values.length; index++) {\n        const children = values[index];\n        if (children.level > values[fatherPosition].level) {\n          if (values[fatherPosition].checked) {\n            children.checked = !children.checked ? !children.checked : true;\n            children.unchecked = false;\n          } else {\n            children.checked = false;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Responsável por ficar atualizando o componente\n   */\n  function handleUpdateComponent() {\n    localStorage.setItem('data', JSON.stringify(values));\n    setValues(values);\n    setUpdateComponent(!updateComponent);\n  }\n  \n  return (\n    <Container>\n      <h1>Tree component</h1>\n      <main>\n        <ul>\n          {\n            values.map((item, index) => {\n              return (\n                <CheckboxContainer key={item.id}>\n                  <CheckboxContent marginLeft={item.level * 1.5}>\n                    <Checkbox \n                      className={item.checked ? 'checked' : ''} \n                      onClick={() => handleCheckFather(index)}\n                    >\n                      { item.checked && !item.unchecked ?\n                        <MdCheck /> \n                        :\n                        item.checked && item.unchecked &&\n                        <MdRemove />\n                      }\n                    </Checkbox>\n\n                    <label \n                      onClick={() => handleCheckFather(index)}\n                    >\n                      {item.name}\n                    </label>\n\n                    { item.children[0] &&\n                      <MdKeyboardArrowDown \n                        className={item.expanded ? 'expanded' : ''} \n                        onClick={() => handleTree(item.children, index)} \n                      />\n                    }\n                    \n                  </CheckboxContent>\n                </CheckboxContainer>\n              );\n            })\n          }\n        </ul>\n      </main>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style/global.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}